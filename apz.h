//non-negative arbitrary precision integers

//includes

#include <stdint.h>

//zero = 0
uint32_t zero[] = {0x00000001, 0x00000000};

//one = 1
uint32_t one[] = {0x00000001, 0x00000001};

//two = 2
uint32_t two[] = {0x00000001, 0x00000002};

//three = 3
uint32_t three[] = {0x00000001, 0x00000003};

//four = 4
uint32_t four[] = {0x00000001, 0x00000004};

//five = 5
uint32_t five[] = {0x00000001, 0x00000005};

//six = 6
uint32_t six[] = {0x00000001, 0x00000006};

//seven = 7
uint32_t seven[] = {0x00000001, 0x00000007};

//eight = 8
uint32_t eight[] = {0x00000001, 0x00000008};

//nine = 9
uint32_t nine[] = {0x00000001, 0x00000009};

//ten = 10
uint32_t ten[] = {0x00000001, 0x0000000A};

//factor1 = 15360
uint32_t factor1[] = {0x00000001, 0x00003C00};

//factor2 = 56320
uint32_t factor2[] = {0x00000001, 0x0000DC00};

//hcf of factor1 and factor2 = 5120
uint32_t hcf1[] = {0x00000001, 0x00001400};

//A1 = 1548
uint32_t A1[] = {0x00000001, 0x0000060C};

//A6 = 18 446 744 073 709 551 615
uint32_t A6[] = {0x00000002,0xFFFFFFFF, 0xFFFFFFFF};

//A7 = 18 446 744 073 709 551 616
uint32_t A7[] = {0x00000003, 0x00000000, 0x00000000, 0x00000001};

//A8 = A6 * A7 = 340 282 366 920 938 463 444 927 863 358 058 659 840
uint32_t A8[] = {0x00000004, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF};

//PI1 = 314 159 265 358 979 323 846 264
uint32_t PI1[] = {0x00000003, 0xFBEADE78, 0x9B9F5CDD, 0x00004286};

//A2 = (12 345 678 987 654 321)^3 = 1 881 676 411 868 862 234 942 354 805 142 998 028 003 108 518 161 
uint32_t A2[] = {0x00000006, 0x11C4F911, 0x7BB0A24B, 0x6F9CE362, 0x9189228F, 0x499949DC, 0x00000001};

//A4 = PI1 + A2 = 1 881 676 411 868 862 234 942 355 119 302 263 386 982 432 364 425
uint32_t A4[] = {0x00000006, 0x0DAFD789, 0x174FFF29, 0x6F9D25E9, 0x9189228F, 0x499949DC, 0x00000001};

//PI2 = 314 159 265 358 979 323 846 264 338 327 950 288 419 716 939 937 510 582 097 494 459 230 781 640 628 620 899
uint32_t PI2[] = {0x00000009, 0x9865CE63, 0xCFC0B915, 0xF4D3142A, 0x3D542CBD, 0x25E62C88, 0x0534A18D, 0xADBADEE1, 0x21E2EBB1, 0x00000A99};

//PI1_SQUARED = PI1 * PI1 = 98 696 044 010 893 586 188 344 697 421 040 885 314 706 757 696
uint32_t PI1_SQUARED[] = {0x00000005, 0xC4B45840, 0x6460C2EA, 0x21146A53, 0x75520BF2, 0x1149AF05}; 

//A5 = PI2 + PI1_SQUARED = 314 159 265 358 979 323 846 264 338 327 950 387 115 760 950 831 096 770 442 191 880 271 666 955 335 378 595
uint32_t A5[] = {0x00000009, 0x5D1A26A3, 0x34217C00, 0x15E77E7E, 0xB2A638B0, 0x372FDB8D, 0x0534A18D, 0xADBADEE1, 0x21E2EBB1, 0x00000A99 };

//A9 = PI1_SQUARED * A5 = 31 006 276 680 299 820 175 476 248 283 840 861 380 554 872 036 984 313 070 591 370 727 836 904 908 696 505 219 192 527 721 621 794 995 018 125 615 597 620 913 089 917 120
uint32_t A9[] = {0x0000000E, 0x3A6DB0C0, 0x16D7730E, 0x544C1096, 0x2A97C1CD, 0xA864378D, 0x83742990, 0xF58723CC, 0xB74C3DEB, 0xD65B2CC7, 0x1A40722B, 0xB43467C8, 0x2CC92E4E, 0x3829A35F, 0x000000B7};

//PI2_SQUARED = 98 696 044 010 893 586 188 344 909 998 761 511 353 136 994 072 407 906 264 133 493 762 200 448 224 192 051 887 902 317 592 951 726 449 328 001 743 779 329 061 425 315 211 406 230 579 435 206 414 152 954 659 568 201
uint32_t PI2_SQUARED[] = {0x00000011, 0x10817A49, 0x2E37FFD0, 0xEB82A50B, 0xD91966B9, 0x022F1EC1, 0x0D0CF0C5, 0xADEDB0DD, 0xAA9DFC26, 0xA890FA3B, 0x5A4A05D3, 0xAA6770D3, 0x95A80EF6, 0x7F0867ED, 0xA5AC509D, 0x1048990E, 0x4023E5DD, 0x0070523F}; 

//PI2_SQUARED_TIMES2 = 197 392 088 021 787 172 376 689 819 997 523 022 706 273 988 144 815 812 528 266 987 524 400 896 448 384 103 775 804 635 185 903 452 898 656 003 487 558 658 122 850 630 422 812 461 158 870 412 828 305 909 319 136 402 
uint32_t PI2_SQUARED_TIMES2[] = {0x00000011, 0x2102F492, 0x5C6FFFA0, 0xD7054A16, 0xB232CD73, 0x045E3D83, 0x1A19E18A, 0x5BDB61BA, 0x553BF84D, 0x5121F477, 0xB4940BA7, 0x54CEE1A6, 0x2B501DED, 0xFE10CFDB, 0x4B58A13A, 0x2091321D, 0x8047CBBA, 0x00E0A47E}; 

//A13 = PI2_SQUARED_TIMES2 * PI2_SQUARED_TIMES2 
	uint32_t A13[] = {0x00000022, 0x5FEEA344, 0x31CA5596, 0xEF71975E, 0xAD7F036C, 0xDADBAC8E, 0x4FF8B2BF, 0x1CAE1822, 0x5DA599DF, 0x1411F308, 0x21FDCA3A, 0x63B45E63, 
                  0x655BA6CB, 0x083519E2, 0xD6E4E11C, 0x93FD76F6, 0x65228ECB, 0x803AD211, 0xAA0A9D07, 0x94F400D8, 0x1EA44AB5, 0x6BC58C85, 0xFA4EA094, 0x34E94373, 
				  0x93AF6858, 0x12F3EF66, 0xF62B8C1F, 0x8FE91BA5, 0x25145CA3, 0xFD85C4C6, 0x95433C58, 0x8E56B21A, 0x09B3E2E6, 0x4712D083, 0x0000C520};

//A14 = numerator of PI1/-A7 when written in simplest terms = -39 269 908 169 872 415 480 783
uint32_t A14[] = {0x8000003, 0xBF7D5BCF, 0xD373EB9B, 0x00000850};

//A15 = denominator of PI1/-A7 when written in simplest terms = 2 305 843 009 213 693 952
uint32_t A15[] = {0x00000002, 0x00000000, 0x20000000}; 

//A16 = 149 922 641 021 729 426 047 108 835 155 232
uint32_t A16[] = {0x00000004, 0x73979D20, 0x2C289A1C, 0x4A2E0932, 0x00000764}; 

//A17 = 2 * 12 345 678 987 654 321 = 24 691 357 975 308 642 = A19/A18
uint32_t A17[] = {0x00000002, 0xC523E962, 0x0057B8A8};

//A18 = A17^2 = 24 691 357 975 308 642^2 = 609 663 158 664 837 680 841 335 159 884 164
uint32_t A18[] = {0x00000004, 0x798F8984, 0x970B7ADA, 0x07E9090F, 0x00001E0F};

//A19 = 8 * A2 = 15 053 411 294 950 897 879 538 838 441 143 984 224 024 868 145 288
uint32_t A19[] = {0x00000006, 0x8E27C888, 0xDD851258, 0x7CE71B13, 0x8C49147B, 0x4CCA4EE4, 0x0000000A};

//A20 = 48924
uint32_t A20[] = {0x00000001, 0x0000BF1C};

//A21 = quotient when A17 divided by A20 = 504 688 046 261
uint32_t A21[] = {0x00000002, 0x81C070B5, 0x00000075}; 

//A22 = remainder when A17 divided by A20 = 35478
uint32_t A22[] = {0x00000001, 0x00008A96}; 





